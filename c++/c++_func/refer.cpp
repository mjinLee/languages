#include<iostream>
using namespace std;
/**
 * - 참조자(reference) : 특정 변수의 실제 이름 대신 사용할 수 있음; 크기가 큰 구조체와
 * 같은 데이터를 함수의 인수로 전달해야 할 경우에 사용; class 설계할 때도 자주 사용
 * - 참조자 선언
 *      int 변수이름; // 변수 선언
 *      int& 참조자이름 = 변수이름; // 참조자 선언
 * - 이때 & 연산자는 주소 연산자가 아닌 타입을 식별하기 위해 사용하는 식별자로 사용된 것;
 * 즉, int&는 int형 변수에 대한 참조를 의미; 선언된 참조자는 대상 변수와 같은 메모리 
 * 위치를 참조하게 됨
 * - 참조자를 선언할 때 주의사항)
 *  1 참조자의 타입은 대상이 되는 변수의 타입과 일치해야 함
 *  2 참조자는 선언과 동시에 초기화되어야 함
 *  3 참조자는 한 번 초기화되면, 참조하는 대상을 변경할 수 없음
 * - 참조자를 이용해 증가 연산을 수행하면, 참조 변수뿐만 아니라 대상 변수도 같이 변경됨
 * - 참조자는 주로 함수에 인수를 전달할 때 사용; 함수가 참조자를 인수로 전달받으면,
 * 참조자가 참조하고 있는 실제 변수의 값을 함수 내에서 조작할 수 있음
 * - 함수의 인수로 참조자를 사용하면,
 *  1 함수 내에서 참조연산자(*)를 사용하지 않으므로, 함수 내부의 코드가 깔끔, 직관적
 *  2 함수의 호출이 값에 의한 전달 방법과 같은 형태가 되어, 코드를 읽기 쉽지 않음;
 *  간단한 함수에서는 굳이 참조에 의한 전달을 하지 말고 값에 의한 전달을 사용하는 것이
 *  좋을 수 있음; 참조 호출이 꼭 필요할 땐 참조자보다는 포인터를 사용하는 것이 더 직관적
 * - 참조에 의한 전달은 참조자뿐만 아니라 포인터를 사용해도 똑같은 결과
 * => 참조자는 크기가 큰 구조체나 클래스를 다룰 때에만 사용하는 것이 좋음
*/
/*void Swap(int&,int&);
int main(void){
    int x =10; // 변수 선언
    int& y = x; // 참조자 선언
    y ++; // 참조자를 이용한 증가연산

    // 참조자를 사용하여 두 변수의 값 서로 맞바꾸기
    int n1 =2, n2=4;
    Swap(n1,n2);
    cout<<"변경 후 n1 : "<<n1<<", n2 : "<<n2<<endl; // n1:4, n2:2
    return 0;
}
void Swap(int& x, int& y){
    int temp;
    temp = x;
    x = y;
    y = temp;
}*/

// 구조체의 참조
struct Book
{
    string title;
    string author;
    int price;
};
void Display(const Book&);
int main(void){
    Book web_book = {"java","peter",28000};
    Display(web_book);
    return 0;
}
void Display(const Book& bk){
    cout << "title : "<<bk.title<<", author : "<<bk.author<<", price : "<<bk.price<<endl;
}
// 함수 내부에서 구조체를 직접 변경할 필요가 없는 때는 const키워드를 사용하여 원본 구조체에
// 대한 변경을 허용하지 않는 것이 좋음
