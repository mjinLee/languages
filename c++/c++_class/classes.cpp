#include<iostream>
using namespace std;
/**
 * - class : 구조체의 상위 호환; 클래스를 가지고 객체 지향 프로그램을 작성할 수 있음
 * - class의 멤버 변수 : 프로퍼티(property), 멤버 함수 : 메소드(method)
 * - 객체 지향 프로그래밍(OOP;Object-Oriented Programming) : 모든 데이터를 객체로
 * 취급하며, 객체가 바로 프로그래밍의 중심이 됨
 * - 객체(object) : 실생활에서 우리가 인식할 수 있는 사물; 객체의 상태와 행동을 구체화
 * 하는 형태의 프로그래밍이 객체 지향 프로그래밍; 이와 같은 객체를 만들어 내기 위한 틀과
 * 같은 개념이 바로 클래스
 * - 특징)
 *  1 추상화(abstraction)
 *  2 캡슐화(encapsulation)
 *  3 정보 은닉(data hiding)
 *  4 상속성(inheritance)
 *  5 다형성(polymorphism)
 * - 객체의 예)
 *      객체(object)
 *      - 고양이
 *      멤버 변수(member variable)
 *      - cat.name_ = "나비"
 *      - cat.family_ = "코리안 숏 헤어"
 *      - cat.age_ = 1
 *      - cat.weight_ = 0.1
 *      멤버 함수(member function)
 *      - cat.Mew()
 *      - cat.Eat()
 *      - cat.Sleep()
 *      - cat.Play()
 *   => 고양이 객체는 모두 위와 같은 멤버 변수와 멤버 함수를 가지지만,
 *     각 멤버 변수의 값은 인스턴스마다 전부 다를 것임
 * - 인스턴스(instance) : 클래스는 구조체와 마찬가지로 사용자가 정의할 수 있는 일종의 
 * 타입; 따라서 클래스를 사용하기 위해서는 우선 해당 클래스 타입의 객체를 선언해야 함;
 * 이렇게 선언된 해당 클래스 타입의 객체를 인스턴스라고 하며, 메모리에 대입된 객체를 의미
 * - 하나의 클래스에서 여러 개의 인스턴스를 생성할 수 있음; 독립된 메모리 공간에 저장된 
 * 자신만의 멤버 변수를 가지지만, 멤버 함수는 모든 인스턴스가 공유함
*/

/**
 * - 클래스의 선언 : 객체 지향 프로그래밍의 특징 중 하나인 추상화를 사용자 정의 타입으로
 *  구현한 것이라 할 수 있음; 구조체를 선언하는 방법과 거의 같음; 
 *  구조체는 struct 키워드를 사용하지만, 클래스는 class 키워드와 접근 제어 지시자를
 *  함께 사용 
 *      => class 클래스이름 {
 *          접근제어지시자1:    // private 제어 지시자는 생략 가능
 *              멤버변수1의타입 멤버변수1의이름;
 *              멤버변수2의타입 멤버변수2의이름;
 *              멤버함수1의 원형
 *              멤버함수2의 원형
 *      };
 * - 접근 제어 지시자는 객체 지향 프로그래밍의 특징 중 하나인 정보 은닉(data hiding)을
 *  위한 키워드; public 영역은 모든 객체에서 접근할 수 있지만, private 영역은 해당
 *  객체 내의 멤버 변수나 멤버 함수만이 접근할 수 있음
 *      => 선언 : 클래스이름 객체참조변수이름; Book web_book;
 * - 멤버 함수의 정의 : c++은 멤버 함수를 클래스의 선언 안이나 밖에서 모두 정의 가능;
 * 클래스의 선언 밖에서 멤버 함수를 정의할 땐 범위 지정 연산자(::)를 사용하여 해당 함수
 * 가 어느 클래스에 속하는지를 명시해야 함
 *      => 반환타입 클래스이름::멤버함수이름(매개변수목록){ 함수의 몸체; }
 * - 예) Book 클래스의 Move() 멤버 함수를 정의
 *      => void Book::Move(int page){ current_page_ = page; }
 * - 만약 멤버 함수가 클래스의 선언 안에서 정의되면, 이 함수는 인라인 함수로 처리되어 
 * 위와 같이 범위 지정 연산자를 사용하여 소속 클래스를 명시할 필요가 없게됨; 또한, 
 * 클래스 선언 밖에서 정의된 멤버 함수도 inline 키워드를 사용하여 인라인 함수로 처리할
 * 수 있음
 * - 멤버함수는 클래스의 선언 안이나 밖에서 모두 정의할 수 있지만, 클래스가 일단 선언된
 * 후에 멤버 함수를 추가할 수는 없음
*/
/**
 * - 멤버 함수의 호출 : 방법은 구조체의 경우와 같음; 멤버함수는 멤버 참조연산자(.)를
 * 사용하여 호출할 수 있음
 *  1 객체이름.멤버함수이름();  // 매개변수가 없는 멤버 함수의 호출
 *  2 객체이름.멤버함수이름(전달할인수목록); // 매개변수가 있는 멤버 함수의 호출
 *  => web_book.Move(30);
*/